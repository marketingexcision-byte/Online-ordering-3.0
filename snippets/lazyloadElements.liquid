<style>
  .lazyload-element {
      opacity: 0; /* Start hidden */
      transition-property: opacity;
  }
  .lazyload-element.animate {
      animation-name: fadeInUp;
      animation-duration: 0.75s;
      animation-delay: 0.4s;
      animation-fill-mode: forwards; /* Keeps the final state */
  }
  .simple-lazyload {
      opacity: 0;
      transition: opacity 0.15s ease-in-out;
  }
  .simple-lazyload.loaded {
      opacity: 1;
  }
  /* Optional: a placeholder style to ensure elements are not shown until fully loaded */
  .simple-lazyload {
      visibility: hidden;
  }
  .simple-lazyload.loaded {
      visibility: visible;
  }
</style>

<script>
  window.addEventListener("load", function() {
      const lazyloadElements = document.querySelectorAll('.simple-lazyload');
  
      lazyloadElements.forEach(element => {
          if (element.tagName === 'IMG') {
              // Check if the image is already loaded
              if (element.complete) {
                  // Add a slight delay to ensure CSS transition applies smoothly
                  setTimeout(() => {
                      element.classList.add('loaded');
                  }, 100); // Adjust delay as needed
              } else {
                  element.addEventListener('load', () => {
                      // Add a slight delay to ensure CSS transition applies smoothly
                      setTimeout(() => {
                          element.classList.add('loaded');
                      }, 100); // Adjust delay as needed
                  });
              }
          } else {
              // Non-image elements
              setTimeout(() => {
                  element.classList.add('loaded');
              }, 100); // Adjust delay as needed
          }
      });
  });
  
  window.addEventListener("load", function() {
      const lazyloadElements = document.querySelectorAll('.lazyload-element');
  
      const observer = new IntersectionObserver(entries => {
          entries.forEach(entry => {
              if (entry.isIntersecting) {
                  entry.target.classList.add('animate');
                  observer.unobserve(entry.target); // Stop observing after animation
              }
          });
      }, {
          root: null, // Use the viewport as the root
          rootMargin: '0px 0px 200px 0px', // Load elements 400px before they enter the viewport
          threshold: 0 // Trigger as soon as any part of the element is in view
      });
  
      lazyloadElements.forEach(element => {
          observer.observe(element);
      });
  });
</script>
